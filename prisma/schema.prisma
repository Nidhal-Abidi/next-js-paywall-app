// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  first_name       String?
  last_name        String?
  email            String?         @unique
  emailVerified    DateTime?
  password         String?
  has_subscription Boolean         @default(false)
  image            String?
  accounts         Account[]
  sessions         Session[]
  // Optional for WebAuthn support
  Authenticator    Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Payment      Payment[]
  Consultation Consultation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Payment {
  id         String   @id @default(uuid())
  paid_price Int
  user_id    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

model Consultation {
  id             String   @id @default(uuid())
  user_id        String?
  type           String // document-review, visa-application-guidance, interview-preparation 
  preferred_data DateTime
  status         String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
}
